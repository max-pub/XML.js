<meta charset="UTF-8"/>
<script src='../dist/full.min.js'></script>
<script src='../dist/xml-view.tag.js'></script>
<link rel="stylesheet" type="text/css" href="highlight.css">

<style>
    @import url('https://fonts.googleapis.com/css?family=Source+Code+Pro&display=swap');
    *{font-family: "Source Code Pro";}
    xml-view{
      --control: red;
      /* background: #333; */
    }
</style>





<h1>source</h1>
<pre id='source'></pre>

<h1>minify</h1>
<pre id='mini'></pre>

<h1>prettify</h1>
<pre id='pretty'></pre>

<h1>transform</h1>
<pre id='transform-xml'></pre>
<pre id='transform-xsl'></pre>
<pre id='transform-res'></pre>

<h1>WebTag lite</h1>
<xml-view theme='lite'></xml-view>
<h1>WebTag dark</h1>
<xml-view theme='dark'></xml-view>

<script>
xml = `<breakfast_menu><food id='234' price='$5.95' last-served='2018-02-07' user='undefined' tasty='true'>
    <name>Belgian Waffles</name><description>Two of our famous Belgian Waffles with plenty of real maple syrup</description>
    <calories>650
        </calories></food><food price="$7.95" tasty='false' sauce='vanilla ketchup' class='gluten-free' next-serve='4000-12-31T00:00:00'>
<name>Strawberry Belgian Waffles</name><description>Light Belgian waffles covered with strawberries and whipped cream</description><calories>
    </calories></food><food price='null' last-served='2018-02-03T17:33:23'><name>Berry-Berry Belgian Waffles</name>
        <description>Light Belgian waffles covered with an assortment of fresh 
            berries and whipped cream</description><fresh>false</fresh><calories>900</calories></food><food price='$4.50'><name>French Toast
                </name><description>Thick slices made from our homemade sourdough bread</description><calories>600</calories></food><food><name>Homestyle Breakfast</name><description>Two eggs, bacon or sausage, toast, and our ever-popular hash browns</description><calories>950</calories></food></breakfast_menu>
                
                `; // <breakfast_menu></breakfast_menu>


xml2 = `<Article>
  <Title>My Article</Title>
  <Authors>
    <Author>Mr. Foo</Author>
    <Author>Mr. Bar</Author>
  </Authors>
  <Body>This is my article text.</Body>
</Article>`;
xsl = `<?xml version="1.0"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

  <xsl:output method="text"/>

  <xsl:template match="/">
    Article - <xsl:value-of select="/Article/Title"/>
    Authors: <xsl:apply-templates select="/Article/Authors/Author"/>
  </xsl:template>

  <xsl:template match="Author">
    - <xsl:value-of select="." />
  </xsl:template>

</xsl:stylesheet>`;

document.querySelector('#source').innerText = xml;
document.querySelector('#mini').innerText = XML.minify(xml);
document.querySelector('#pretty').innerText = XML.prettify(xml);
document.querySelector('#transform-xml').innerHTML = XML.highlight(xml2);
document.querySelector('#transform-xsl').innerHTML = XML.highlight(xsl);
document.querySelector('[theme=lite]').value = xml;
document.querySelector('[theme=dark]').value = xml;

(async function(){
  document.querySelector('#transform-res').innerHTML = XML.transform(xml2,xsl);
  // document.querySelector('#transform').innerHTML = XML.stringify(XML.transform((await XML.fetch('demo.xml')).querySelector('Article'), await XML.fetch('demo.xsl')));
  // document.querySelector('#transform2').innerHTML = XML.stringify(XML.transform((await XML.fetch('demo2.xml')).querySelector('#line'), await XML.fetch('demo2.xsl')));
})()
</script>








