try{var DOMParser=require("xmldom").DOMParser,XMLSerializer=require("xmldom").XMLSerializer}catch(e){}XML={parse:(e,t="text/xml")=>(new DOMParser).parseFromString(e,t),stringify:e=>(new XMLSerializer).serializeToString(e),transform:(e,t)=>{let r=new XSLTProcessor;r.importStylesheet("string"==typeof t?XML.parse(t):t);let i=r.transformToFragment("string"==typeof e?XML.parse(e):e,document);return"string"==typeof e?XML.stringify(i):i},minify:e=>XML.toString(e,!1),prettify:e=>XML.toString(e,!0),toString:(e,t,r=0,i=!1)=>{"string"==typeof e&&(e=XML.parse(e));let n=t?Array(r+1).fill("").join("\t"):"",o=t?"\n":"";if(3==e.nodeType)return(i?"":n)+e.textContent.trim()+(i?"":o);if(!e.tagName)return XML.toString(e.firstChild,t);let s=n+`<${e.tagName}`;for(let t=0;t<e.attributes.length;t++)s+=` ${e.attributes[t].name}="${e.attributes[t].value}"`;if(0==e.childNodes.length)return s+" />"+o;s+=">";let a=1==e.childNodes.length&&3==e.childNodes[0].nodeType;a||(s+=o);for(let i=0;i<e.childNodes.length;i++)s+=XML.toString(e.childNodes[i],t,r+1,a);return s+(a?"":n)+`</${e.tagName}>`+o}},module.exports.XML=XML;